# Implementation of classic arcade game Pong
# You can play it by copying and pasting the following URL: http://www.codeskulptor.org/#user47_JfF6xWDAsDKN6BO.py
# It uses simplegui to render the code into the Browser through Javascript

import simplegui
import random

# initialize globals - pos and vel encode vertical info for paddles
WIDTH = 600
HEIGHT = 400       
BALL_RADIUS = 20
PAD_WIDTH = 8
PAD_HEIGHT = 80
HALF_PAD_WIDTH = PAD_WIDTH / 2
HALF_PAD_HEIGHT = PAD_HEIGHT / 2
LEFT = False
RIGHT = True

paddle1_pos = HEIGHT / 2 - HALF_PAD_HEIGHT
paddle2_pos = HEIGHT / 2 - HALF_PAD_HEIGHT
paddle1_vel = 0
paddle2_vel = 0

paddle_up_vel = -8
paddle_down_vel = 8

score1 = 0
score2 = 0

# initialize ball_pos and ball_vel for new bal in middle of table
# if direction is RIGHT, the ball's velocity is upper right, else upper left
def spawn_ball(direction):
    global ball_pos, ball_vel # these are vectors stored as lists
    
    ball_pos = [WIDTH / 2, HEIGHT / 2]
    ball_vel = [ random.randrange(4, 6), random.randrange(1, 3) ]
    
    if direction == RIGHT:
        ball_vel[1] = - ball_vel[1]
    else:
        ball_vel[0] = - ball_vel[0]
        ball_vel[1] = - ball_vel[1]

# define event handlers
def new_game():
    global paddle1_pos, paddle2_pos, paddle1_vel, paddle2_vel  # these are numbers
    global score1, score2  # these are ints
    score1 = 0
    score2 = 0
    spawn_ball(RIGHT)

def draw(canvas):
    global score1, score2, paddle1_pos, paddle2_pos, ball_pos, ball_vel
        
    # draw mid line and gutters
    canvas.draw_line([WIDTH / 2, 0],[WIDTH / 2, HEIGHT], 1, "White")
    canvas.draw_line([PAD_WIDTH, 0],[PAD_WIDTH, HEIGHT], 1, "White")
    canvas.draw_line([WIDTH - PAD_WIDTH, 0],[WIDTH - PAD_WIDTH, HEIGHT], 1, "White")
        
    # update ball
    ball_pos[0] += ball_vel[0]
    ball_pos[1] += ball_vel[1]
    
    # Checks if it bounces off a wall
    if ball_pos[1] <= BALL_RADIUS:
        ball_vel[1] = - ball_vel[1]
    elif ball_pos[1] >= HEIGHT - BALL_RADIUS:
        ball_vel[1] = - ball_vel[1]
    
    # draw ball
    canvas.draw_circle((ball_pos), BALL_RADIUS, 1, 'White', 'White')
    
    # update paddle's vertical position, keep paddle on the screen
    if paddle1_pos >= 0 and paddle1_vel == paddle_up_vel:
        paddle1_pos += paddle1_vel
    elif paddle1_pos + PAD_HEIGHT <= HEIGHT and paddle1_vel == paddle_down_vel:
        paddle1_pos += paddle1_vel
        
    if paddle2_pos >= 0 and paddle2_vel == paddle_up_vel:
        paddle2_pos += paddle2_vel
    elif paddle2_pos + PAD_HEIGHT <= HEIGHT and paddle2_vel == paddle_down_vel:
        paddle2_pos += paddle2_vel
    
    # draw paddles
    canvas.draw_line([HALF_PAD_WIDTH, paddle1_pos], [HALF_PAD_WIDTH, paddle1_pos + PAD_HEIGHT], PAD_WIDTH, '#E0482D')
    canvas.draw_line([WIDTH - HALF_PAD_WIDTH, paddle2_pos], [WIDTH - HALF_PAD_WIDTH, paddle2_pos + PAD_HEIGHT], PAD_WIDTH, '#4765BA')
    
    # determine whether paddle and ball collide    
    if (ball_pos[0] - BALL_RADIUS <= (PAD_WIDTH + 2) 
        and (ball_pos[1] >= paddle1_pos 
        and ball_pos[1] <= paddle1_pos + PAD_HEIGHT)):
            ball_vel[0] = - ball_vel[0]
            ball_vel[1] *= 1.1
            if abs(ball_vel[0]) < 17:
                ball_vel[0] *= 1.1
    elif (ball_pos[0] + BALL_RADIUS >= (WIDTH - PAD_WIDTH - 2) 
          and (ball_pos[1] >= paddle2_pos 
          and ball_pos[1] <= paddle2_pos + PAD_HEIGHT)):
            ball_vel[0] = - ball_vel[0]
            ball_vel[1] *= 1.1
            if abs(ball_vel[0]) < 17:
                ball_vel[0] *= 1.1
        
    # Checks if it hits the gutter to respawn the ball to the opposite direction
    # If it hits a paddle, there is no way the spawn will be activated, so it avoids renderization issues
    if (ball_pos[0] <= BALL_RADIUS + PAD_WIDTH
        and (ball_pos[1] <= paddle1_pos 
        or ball_pos[1] >= paddle1_pos + PAD_HEIGHT)):
            score2 += 1
            spawn_ball(RIGHT)
    elif (ball_pos[0] >= WIDTH - BALL_RADIUS - PAD_WIDTH 
          and (ball_pos[1] <= paddle2_pos 
          or ball_pos[1] >= paddle2_pos + PAD_HEIGHT)):
            score1 += 1
            spawn_ball(LEFT)
        
    # draw scores
    canvas.draw_text(str(score1), (WIDTH / 2 - 80, 40), 35, '#E0482D', 'monospace')
    canvas.draw_text(str(score2), (WIDTH / 2 + 60, 40), 35, '#4765BA', 'monospace')
    
def keydown(key):
    global paddle1_vel, paddle2_vel
    if key == simplegui.KEY_MAP["w"]:
        paddle1_vel = paddle_up_vel
    elif key == simplegui.KEY_MAP["s"]:
        paddle1_vel = paddle_down_vel
        
    if key == simplegui.KEY_MAP["up"]:
        paddle2_vel = paddle_up_vel
    elif key == simplegui.KEY_MAP["down"]:
        paddle2_vel = paddle_down_vel
   
def keyup(key):
    global paddle1_vel, paddle2_vel
    if key == simplegui.KEY_MAP["w"]:
        paddle1_vel = 0
    elif key == simplegui.KEY_MAP["s"]:
        paddle1_vel = 0
        
    if key == simplegui.KEY_MAP["up"]:
        paddle2_vel = 0
    elif key == simplegui.KEY_MAP["down"]:
        paddle2_vel = 0
        
def button_handler():
    new_game()

# create frame
frame = simplegui.create_frame("Pong", WIDTH, HEIGHT)
frame.set_draw_handler(draw)
frame.set_keydown_handler(keydown)
frame.set_keyup_handler(keyup)
button1 = frame.add_button('Reset', button_handler, 200)

# start frame
new_game()
frame.start()
