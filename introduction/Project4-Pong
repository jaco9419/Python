# Implementation of classic arcade game Pong

import simplegui
import random

# initialize globals - pos and vel encode vertical info for paddles
WIDTH = 600
HEIGHT = 400       
BALL_RADIUS = 20
PAD_WIDTH = 8
PAD_HEIGHT = 80
HALF_PAD_WIDTH = PAD_WIDTH / 2
HALF_PAD_HEIGHT = PAD_HEIGHT / 2
LEFT = False
RIGHT = True

paddle1_pos = [HEIGHT / 2 - HALF_PAD_HEIGHT, HEIGHT / 2 + HALF_PAD_HEIGHT]
paddle2_pos = [HEIGHT / 2 - HALF_PAD_HEIGHT, HEIGHT / 2 + HALF_PAD_HEIGHT]
paddle1_vel = [0, 0]
paddle2_vel = [0, 0]

paddle_up_vel = -6
paddle_down_vel = 6

# initialize ball_pos and ball_vel for new bal in middle of table
# if direction is RIGHT, the ball's velocity is upper right, else upper left
def spawn_ball(direction):
    global ball_pos, ball_vel # these are vectors stored as lists
    
    ball_pos = [WIDTH / 2, HEIGHT / 2]
    #ball_vel = [ random.randrange(120.0 / 60.0, 240.0 / 60.0),  random.randrange(60.0 / 60.0, 180.0 / 60.0) ]
    ball_vel = [10, 0]
    
    if direction == RIGHT:
        ball_vel[1] = - ball_vel[1]
    else:
        ball_vel[0] = - ball_vel[0]
        ball_vel[1] = - ball_vel[1]

# define event handlers
def new_game():
    global paddle1_pos, paddle2_pos, paddle1_vel, paddle2_vel  # these are numbers
    global score1, score2  # these are ints
    spawn_ball(RIGHT)

def draw(canvas):
    global score1, score2, paddle1_pos, paddle2_pos, ball_pos, ball_vel
        
    # draw mid line and gutters
    canvas.draw_line([WIDTH / 2, 0],[WIDTH / 2, HEIGHT], 1, "White")
    canvas.draw_line([PAD_WIDTH, 0],[PAD_WIDTH, HEIGHT], 1, "White")
    canvas.draw_line([WIDTH - PAD_WIDTH, 0],[WIDTH - PAD_WIDTH, HEIGHT], 1, "White")
        
    # update ball
    ball_pos[0] += ball_vel[0]
    ball_pos[1] += ball_vel[1]
    
    # Checks if it bounces off a wall
    if ball_pos[1] <= BALL_RADIUS:
        ball_vel[1] = - ball_vel[1]
    elif ball_pos[1] >= HEIGHT - BALL_RADIUS:
        ball_vel[1] = - ball_vel[1]
    
    
    
    # draw ball
    canvas.draw_circle((ball_pos), BALL_RADIUS, 1, 'White', 'White')
    
    # update paddle's vertical position, keep paddle on the screen
    if paddle1_pos[0] >= 0 and paddle1_vel[0] == paddle_up_vel:
        paddle1_pos[0] += paddle1_vel[0]
        paddle1_pos[1] += paddle1_vel[1]
    elif paddle1_pos[1] <= HEIGHT and paddle1_vel[1] == paddle_down_vel:
        paddle1_pos[0] += paddle1_vel[0]
        paddle1_pos[1] += paddle1_vel[1]
        
    if paddle2_pos[0] >= 0 and paddle2_vel[0] == paddle_up_vel:
        paddle2_pos[0] += paddle2_vel[0]
        paddle2_pos[1] += paddle2_vel[1]
    elif paddle2_pos[1] <= HEIGHT and paddle2_vel[1] == paddle_down_vel:
        paddle2_pos[0] += paddle2_vel[0]
        paddle2_pos[1] += paddle2_vel[1]
    
    
    # draw paddles
    canvas.draw_line([HALF_PAD_WIDTH, paddle1_pos[0]], [HALF_PAD_WIDTH, paddle1_pos[1]], PAD_WIDTH, 'Blue')
    canvas.draw_line([WIDTH - HALF_PAD_WIDTH, paddle2_pos[0]], [WIDTH - HALF_PAD_WIDTH, paddle2_pos[1]], PAD_WIDTH, 'Blue')
    
    # determine whether paddle and ball collide    
    if ball_pos[0] - BALL_RADIUS <= (PAD_WIDTH + 2) + 20 and (ball_pos[1] >= paddle1_pos[0] and ball_pos[1] <= paddle1_pos[1]):
        ball_vel[0] = - ball_vel[0]
        ball_vel[0] *= 1.1
        print ball_pos, ball_vel, BALL_RADIUS + PAD_WIDTH * 2
    elif ball_pos[0] + BALL_RADIUS >= (WIDTH - PAD_WIDTH - 2) - 20 and (ball_pos[1] >= paddle2_pos[0] and ball_pos[1] <= paddle2_pos[1]):
        ball_vel[0] = - ball_vel[0]
        ball_vel[0] *= 1.1
        print ball_pos, ball_vel, WIDTH - PAD_WIDTH * 2 - BALL_RADIUS
        
        # Checks if it hits the gutter to respawn the ball to the opposite direction
    if ball_pos[0] <= BALL_RADIUS + PAD_WIDTH -1:
        print "respanwed"
        spawn_ball(RIGHT)
    elif ball_pos[0] >= WIDTH - BALL_RADIUS - PAD_WIDTH + 1:
        print "respanwed"
        spawn_ball(LEFT)
        
    # draw scores
        
def keydown(key):
    global paddle1_vel, paddle2_vel
    if key == simplegui.KEY_MAP["w"]:
        paddle1_vel[0] = paddle_up_vel
        paddle1_vel[1] = paddle_up_vel
    elif key == simplegui.KEY_MAP["s"]:
        paddle1_vel[0] = paddle_down_vel
        paddle1_vel[1] = paddle_down_vel
        
    if key == simplegui.KEY_MAP["up"]:
        paddle2_vel[0] = paddle_up_vel
        paddle2_vel[1] = paddle_up_vel
    elif key == simplegui.KEY_MAP["down"]:
        paddle2_vel[0] = paddle_down_vel
        paddle2_vel[1] = paddle_down_vel
   
def keyup(key):
    global paddle1_vel, paddle2_vel
    if key == simplegui.KEY_MAP["w"]:
        paddle1_vel[0] = 0
        paddle1_vel[1] = 0
    elif key == simplegui.KEY_MAP["s"]:
        paddle1_vel[0] = 0
        paddle1_vel[1] = 0
        
    if key == simplegui.KEY_MAP["up"]:
        paddle2_vel[0] = 0
        paddle2_vel[1] = 0
    elif key == simplegui.KEY_MAP["down"]:
        paddle2_vel[0] = 0
        paddle2_vel[1] = 0

# create frame
frame = simplegui.create_frame("Pong", WIDTH, HEIGHT)
frame.set_draw_handler(draw)
frame.set_keydown_handler(keydown)
frame.set_keyup_handler(keyup)


# start frame
new_game()
frame.start()
